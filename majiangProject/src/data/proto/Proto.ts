module proto{	export class c_LoginAccount extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_LoginAccount;		}		//required>string		public userName:string;//用户名		//required>string		public password:string;//密码		public init(_userName:string,_password:string):c_LoginAccount{			this.userName=_userName;			this.password=_password;			return this;		}public encode(by:egret.ByteArray):void{by.writeUTF(this.userName);by.writeUTF(this.password);	}public decode(by:egret.ByteArray ):void{this.userName=by.readUTF();this.password=by.readUTF();	}	}	export class s_LoginAccount extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_LoginAccount;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		//optional>UserInfo		public userInfo:UserInfo;//用户信息		public init(_isSuccess:boolean,_errMsg:string,_userInfo:UserInfo):s_LoginAccount{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			this.userInfo=_userInfo;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}if (this.userInfo!= null){by.writeByte(1);this.userInfo.encode(by);}else{	by.writeByte(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}if (by.readByte() > 0) {this.userInfo=new UserInfo();this.userInfo.decode(by);}	}	}	export class UserInfo extends proto.Pro{		public constructor(){			super();			this.S=MessageType.UserInfo;		}		//required>int		public userId:number=0;//用户唯一编号		//required>string		public nick:string;//昵称		//required>int		public cardCount:number=0;//房卡数量		public init(_userId:number,_nick:string,_cardCount:number):UserInfo{			this.userId=_userId;			this.nick=_nick;			this.cardCount=_cardCount;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.userId);by.writeUTF(this.nick);by.writeInt(this.cardCount);	}public decode(by:egret.ByteArray ):void{this.userId=by.readInt();this.nick=by.readUTF();this.cardCount=by.readInt();	}	}	export class UserInfoWithSeat extends proto.Pro{		public constructor(){			super();			this.S=MessageType.UserInfoWithSeat;		}		//required>int		public seat:number=0;//坐位		//required>UserInfo		public userInfo:UserInfo;//用户信息		public init(_seat:number,_userInfo:UserInfo):UserInfoWithSeat{			this.seat=_seat;			this.userInfo=_userInfo;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.seat);this.userInfo.encode(by);	}public decode(by:egret.ByteArray ):void{this.seat=by.readInt();this.userInfo=new UserInfo();this.userInfo.decode(by);	}	}	export class s_Kickout extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_Kickout;		}		//required>string		public reason:string;//踢出原因		public init(_reason:string):s_Kickout{			this.reason=_reason;			return this;		}public encode(by:egret.ByteArray):void{by.writeUTF(this.reason);	}public decode(by:egret.ByteArray ):void{this.reason=by.readUTF();	}	}	export class IntList extends proto.Pro{		public constructor(){			super();			this.S=MessageType.IntList;		}		//repeated>int		public list:number[] ;//整形列表		public init(_list:number[]):IntList{			this.list=_list;			return this;		}public encode(by:egret.ByteArray):void{if (this.list != null){by.writeShort(this.list.length);for (var i:number = 0; i < this.list.length; i++) {by.writeInt(this.list[i]);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{var __count0:number = by.readShort();		this.list = [];for (var i:number = 0; i < __count0; i++) {this.list[i]=by.readInt();}	}	}	export class SeatCardInfo extends proto.Pro{		public constructor(){			super();			this.S=MessageType.SeatCardInfo;		}		//required>int		public seat:number=0;//所在坐位		//repeated>IntList		public PongKongChow:IntList[] ;//碰杠吃过的牌		//repeated>int		public playCards:number[] ;//打过的牌		public init(_seat:number,_PongKongChow:IntList[],_playCards:number[]):SeatCardInfo{			this.seat=_seat;			this.PongKongChow=_PongKongChow;			this.playCards=_playCards;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.seat);if (this.PongKongChow != null){by.writeShort(this.PongKongChow.length);for (var i:number = 0; i < this.PongKongChow.length; i++) {			this.PongKongChow[i].encode(by);}}else{by.writeShort(0);}if (this.playCards != null){by.writeShort(this.playCards.length);for (var i:number = 0; i < this.playCards.length; i++) {by.writeInt(this.playCards[i]);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.seat=by.readInt();var __count1:number = by.readShort();		this.PongKongChow = [];for (var i:number = 0; i < __count1; i++) {			this.PongKongChow[i] = new IntList();			this.PongKongChow[i].decode(by);}var __count2:number = by.readShort();		this.playCards = [];for (var i:number = 0; i < __count2; i++) {this.playCards[i]=by.readInt();}	}	}	export class c_CreateRoom extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_CreateRoom;		}		//required>int		public basicScore:number=0;//底分		//required>int		public times:number=0;//打几局		//required>string		public roomPassword:string;//房间密码		//required>int		public playerCount:number=0;//几人房间		public init(_basicScore:number,_times:number,_roomPassword:string,_playerCount:number):c_CreateRoom{			this.basicScore=_basicScore;			this.times=_times;			this.roomPassword=_roomPassword;			this.playerCount=_playerCount;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.basicScore);by.writeInt(this.times);by.writeUTF(this.roomPassword);by.writeInt(this.playerCount);	}public decode(by:egret.ByteArray ):void{this.basicScore=by.readInt();this.times=by.readInt();this.roomPassword=by.readUTF();this.playerCount=by.readInt();	}	}	export class s_CreateRoom extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_CreateRoom;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		//optional>int		public tableId:number=0;//所在牌桌ID		//optional>int		public seat:number=0;//所在坐位		//repeated>UserInfoWithSeat		public userInfoList:UserInfoWithSeat[] ;//已存在的玩家信息		public init(_isSuccess:boolean,_errMsg:string,_tableId:number,_seat:number,_userInfoList:UserInfoWithSeat[]):s_CreateRoom{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			this.tableId=_tableId;			this.seat=_seat;			this.userInfoList=_userInfoList;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.tableId);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.seat);if (this.userInfoList != null){by.writeShort(this.userInfoList.length);for (var i:number = 0; i < this.userInfoList.length; i++) {			this.userInfoList[i].encode(by);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}if (by.readByte() > 0) {this.tableId=by.readInt();}if (by.readByte() > 0) {this.seat=by.readInt();}var __count4:number = by.readShort();		this.userInfoList = [];for (var i:number = 0; i < __count4; i++) {			this.userInfoList[i] = new UserInfoWithSeat();			this.userInfoList[i].decode(by);}	}	}	export class c_EnterRoom extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_EnterRoom;		}		//required>int		public tableId:number=0;//牌桌ID		//required>string		public roomPassword:string;//房间密码		public init(_tableId:number,_roomPassword:string):c_EnterRoom{			this.tableId=_tableId;			this.roomPassword=_roomPassword;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.tableId);by.writeUTF(this.roomPassword);	}public decode(by:egret.ByteArray ):void{this.tableId=by.readInt();this.roomPassword=by.readUTF();	}	}	export class s_EnterRoom extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_EnterRoom;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		//optional>int		public seat:number=0;//所在坐位		//optional>int		public playerCount:number=0;//所创房间人数		//optional>int		public Dice1:number=0;//股子1		//optional>int		public Dice2:number=0;//股子2		//optional>int		public drawCard:number=0;//摸的那张牌		//repeated>int		public HandsCard:number[] ;//手牌		//repeated>SeatCardInfo		public seatCardInfoList:SeatCardInfo[] ;//坐位上出过的和吃碰杠过的牌		//repeated>UserInfoWithSeat		public userInfoList:UserInfoWithSeat[] ;//已存在玩家的信息		public init(_isSuccess:boolean,_errMsg:string,_seat:number,_playerCount:number,_Dice1:number,_Dice2:number,_drawCard:number,_HandsCard:number[],_seatCardInfoList:SeatCardInfo[],_userInfoList:UserInfoWithSeat[]):s_EnterRoom{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			this.seat=_seat;			this.playerCount=_playerCount;			this.Dice1=_Dice1;			this.Dice2=_Dice2;			this.drawCard=_drawCard;			this.HandsCard=_HandsCard;			this.seatCardInfoList=_seatCardInfoList;			this.userInfoList=_userInfoList;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.seat);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.playerCount);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.Dice1);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.Dice2);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.drawCard);if (this.HandsCard != null){by.writeShort(this.HandsCard.length);for (var i:number = 0; i < this.HandsCard.length; i++) {by.writeInt(this.HandsCard[i]);}}else{by.writeShort(0);}if (this.seatCardInfoList != null){by.writeShort(this.seatCardInfoList.length);for (var i:number = 0; i < this.seatCardInfoList.length; i++) {			this.seatCardInfoList[i].encode(by);}}else{by.writeShort(0);}if (this.userInfoList != null){by.writeShort(this.userInfoList.length);for (var i:number = 0; i < this.userInfoList.length; i++) {			this.userInfoList[i].encode(by);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}if (by.readByte() > 0) {this.seat=by.readInt();}if (by.readByte() > 0) {this.playerCount=by.readInt();}if (by.readByte() > 0) {this.Dice1=by.readInt();}if (by.readByte() > 0) {this.Dice2=by.readInt();}if (by.readByte() > 0) {this.drawCard=by.readInt();}var __count7:number = by.readShort();		this.HandsCard = [];for (var i:number = 0; i < __count7; i++) {this.HandsCard[i]=by.readInt();}var __count8:number = by.readShort();		this.seatCardInfoList = [];for (var i:number = 0; i < __count8; i++) {			this.seatCardInfoList[i] = new SeatCardInfo();			this.seatCardInfoList[i].decode(by);}var __count9:number = by.readShort();		this.userInfoList = [];for (var i:number = 0; i < __count9; i++) {			this.userInfoList[i] = new UserInfoWithSeat();			this.userInfoList[i].decode(by);}	}	}	export class c_LeaveRoom extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_LeaveRoom;		}		public init():c_LeaveRoom{			return this;		}public encode(by:egret.ByteArray):void{	}public decode(by:egret.ByteArray ):void{	}	}	export class s_LeaveRoom extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_LeaveRoom;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		public init(_isSuccess:boolean,_errMsg:string):s_LeaveRoom{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}	}	}	export class c_RaiseHands extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_RaiseHands;		}		public init():c_RaiseHands{			return this;		}public encode(by:egret.ByteArray):void{	}public decode(by:egret.ByteArray ):void{	}	}	export class s_RaiseHands extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_RaiseHands;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		public init(_isSuccess:boolean,_errMsg:string):s_RaiseHands{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}	}	}	export class AttrValue extends proto.Pro{		public constructor(){			super();			this.S=MessageType.AttrValue;		}		//required>int		public attrId:number=0;//属性ID		//optional>int		public value:number=0;//属性值		public init(_attrId:number,_value:number):AttrValue{			this.attrId=_attrId;			this.value=_value;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.attrId);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.value);	}public decode(by:egret.ByteArray ):void{this.attrId=by.readInt();if (by.readByte() > 0) {this.value=by.readInt();}	}	}	export class PointsInfo extends proto.Pro{		public constructor(){			super();			this.S=MessageType.PointsInfo;		}		//optional>bool		public isSeventPoint:boolean;//普通七对		//optional>bool		public isDrawPoint:boolean;//自摸		//optional>bool		public isGunPoint:boolean;//点炮		//optional>int		public gunnedUserSeat:number=0;//被点炮的人是谁		//optional>bool		public isDealerPoint:boolean;//庄胡		//optional>bool		public isEmptyForPKC:boolean;//门清		//optional>bool		public isSameColor:boolean;//清一色		//optional>bool		public isPongWin:boolean;//碰碰胡		//optional>bool		public isTwoFiveEight:boolean;//将一色全是258		public init(_isSeventPoint:boolean,_isDrawPoint:boolean,_isGunPoint:boolean,_gunnedUserSeat:number,_isDealerPoint:boolean,_isEmptyForPKC:boolean,_isSameColor:boolean,_isPongWin:boolean,_isTwoFiveEight:boolean):PointsInfo{			this.isSeventPoint=_isSeventPoint;			this.isDrawPoint=_isDrawPoint;			this.isGunPoint=_isGunPoint;			this.gunnedUserSeat=_gunnedUserSeat;			this.isDealerPoint=_isDealerPoint;			this.isEmptyForPKC=_isEmptyForPKC;			this.isSameColor=_isSameColor;			this.isPongWin=_isPongWin;			this.isTwoFiveEight=_isTwoFiveEight;			return this;		}public encode(by:egret.ByteArray):void{//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isSeventPoint);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isDrawPoint);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isGunPoint);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.gunnedUserSeat);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isDealerPoint);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isEmptyForPKC);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isSameColor);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isPongWin);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isTwoFiveEight);	}public decode(by:egret.ByteArray ):void{if (by.readByte() > 0) {this.isSeventPoint=by.readBoolean();}if (by.readByte() > 0) {this.isDrawPoint=by.readBoolean();}if (by.readByte() > 0) {this.isGunPoint=by.readBoolean();}if (by.readByte() > 0) {this.gunnedUserSeat=by.readInt();}if (by.readByte() > 0) {this.isDealerPoint=by.readBoolean();}if (by.readByte() > 0) {this.isEmptyForPKC=by.readBoolean();}if (by.readByte() > 0) {this.isSameColor=by.readBoolean();}if (by.readByte() > 0) {this.isPongWin=by.readBoolean();}if (by.readByte() > 0) {this.isTwoFiveEight=by.readBoolean();}	}	}	export class SeatHandCards extends proto.Pro{		public constructor(){			super();			this.S=MessageType.SeatHandCards;		}		//optional>int		public seat:number=0;//所坐位置		//repeated>int		public handCards:number[] ;//有哪些手牌		//optional>int		public drawCard:number=0;//摸的那张牌		//repeated>IntList		public pongKongChow:IntList[] ;//碰杠吃过的牌		//repeated>int		public playCards:number[] ;//打出过的牌		//optional>PointsInfo		public pointsInfo:PointsInfo;//番数		//optional>int		public scores:number=0;//得分		//optional>int		public kongCount:number=0;//明杠数量		//optional>int		public anKongCount:number=0;//暗杠数量		public init(_seat:number,_handCards:number[],_drawCard:number,_pongKongChow:IntList[],_playCards:number[],_pointsInfo:PointsInfo,_scores:number,_kongCount:number,_anKongCount:number):SeatHandCards{			this.seat=_seat;			this.handCards=_handCards;			this.drawCard=_drawCard;			this.pongKongChow=_pongKongChow;			this.playCards=_playCards;			this.pointsInfo=_pointsInfo;			this.scores=_scores;			this.kongCount=_kongCount;			this.anKongCount=_anKongCount;			return this;		}public encode(by:egret.ByteArray):void{//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.seat);if (this.handCards != null){by.writeShort(this.handCards.length);for (var i:number = 0; i < this.handCards.length; i++) {by.writeInt(this.handCards[i]);}}else{by.writeShort(0);}//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.drawCard);if (this.pongKongChow != null){by.writeShort(this.pongKongChow.length);for (var i:number = 0; i < this.pongKongChow.length; i++) {			this.pongKongChow[i].encode(by);}}else{by.writeShort(0);}if (this.playCards != null){by.writeShort(this.playCards.length);for (var i:number = 0; i < this.playCards.length; i++) {by.writeInt(this.playCards[i]);}}else{by.writeShort(0);}if (this.pointsInfo!= null){by.writeByte(1);this.pointsInfo.encode(by);}else{	by.writeByte(0);}//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.scores);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.kongCount);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.anKongCount);	}public decode(by:egret.ByteArray ):void{if (by.readByte() > 0) {this.seat=by.readInt();}var __count1:number = by.readShort();		this.handCards = [];for (var i:number = 0; i < __count1; i++) {this.handCards[i]=by.readInt();}if (by.readByte() > 0) {this.drawCard=by.readInt();}var __count3:number = by.readShort();		this.pongKongChow = [];for (var i:number = 0; i < __count3; i++) {			this.pongKongChow[i] = new IntList();			this.pongKongChow[i].decode(by);}var __count4:number = by.readShort();		this.playCards = [];for (var i:number = 0; i < __count4; i++) {this.playCards[i]=by.readInt();}if (by.readByte() > 0) {this.pointsInfo=new PointsInfo();this.pointsInfo.decode(by);}if (by.readByte() > 0) {this.scores=by.readInt();}if (by.readByte() > 0) {this.kongCount=by.readInt();}if (by.readByte() > 0) {this.anKongCount=by.readInt();}	}	}	export class s_AttrChange extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_AttrChange;		}		//repeated>AttrValue		public attrList:AttrValue[] ;//属性改变列表		public init(_attrList:AttrValue[]):s_AttrChange{			this.attrList=_attrList;			return this;		}public encode(by:egret.ByteArray):void{if (this.attrList != null){by.writeShort(this.attrList.length);for (var i:number = 0; i < this.attrList.length; i++) {			this.attrList[i].encode(by);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{var __count0:number = by.readShort();		this.attrList = [];for (var i:number = 0; i < __count0; i++) {			this.attrList[i] = new AttrValue();			this.attrList[i].decode(by);}	}	}	export class s_NotifyEnterTable extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyEnterTable;		}		//required>UserInfoWithSeat		public userInfo:UserInfoWithSeat;//加入玩家信息		public init(_userInfo:UserInfoWithSeat):s_NotifyEnterTable{			this.userInfo=_userInfo;			return this;		}public encode(by:egret.ByteArray):void{this.userInfo.encode(by);	}public decode(by:egret.ByteArray ):void{this.userInfo=new UserInfoWithSeat();this.userInfo.decode(by);	}	}	export class s_NotifyLeaveTable extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyLeaveTable;		}		//required>int		public seat:number=0;//离开坐位		public init(_seat:number):s_NotifyLeaveTable{			this.seat=_seat;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.seat);	}public decode(by:egret.ByteArray ):void{this.seat=by.readInt();	}	}	export class s_NotifyHandCards extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyHandCards;		}		//required>int		public dealer:number=0;//庄家是谁		//optional>int		public dice1:number=0;//骰子1		//optional>int		public dice2:number=0;//骰子2		//repeated>int		public handCards:number[] ;//玩家手牌		public init(_dealer:number,_dice1:number,_dice2:number,_handCards:number[]):s_NotifyHandCards{			this.dealer=_dealer;			this.dice1=_dice1;			this.dice2=_dice2;			this.handCards=_handCards;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.dealer);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.dice1);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.dice2);if (this.handCards != null){by.writeShort(this.handCards.length);for (var i:number = 0; i < this.handCards.length; i++) {by.writeInt(this.handCards[i]);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.dealer=by.readInt();if (by.readByte() > 0) {this.dice1=by.readInt();}if (by.readByte() > 0) {this.dice2=by.readInt();}var __count3:number = by.readShort();		this.handCards = [];for (var i:number = 0; i < __count3; i++) {this.handCards[i]=by.readInt();}	}	}	export class s_NotifyDealCard extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyDealCard;		}		//required>int		public seat:number=0;//哪个坐位玩家		//optional>int		public drawCard:number=0;//发的哪张牌		//optional>bool		public isWin:boolean;//是否胡牌		//repeated>IntList		public KongCards:IntList[] ;//可组合牌		public init(_seat:number,_drawCard:number,_isWin:boolean,_KongCards:IntList[]):s_NotifyDealCard{			this.seat=_seat;			this.drawCard=_drawCard;			this.isWin=_isWin;			this.KongCards=_KongCards;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.seat);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.drawCard);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isWin);if (this.KongCards != null){by.writeShort(this.KongCards.length);for (var i:number = 0; i < this.KongCards.length; i++) {			this.KongCards[i].encode(by);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.seat=by.readInt();if (by.readByte() > 0) {this.drawCard=by.readInt();}if (by.readByte() > 0) {this.isWin=by.readBoolean();}var __count3:number = by.readShort();		this.KongCards = [];for (var i:number = 0; i < __count3; i++) {			this.KongCards[i] = new IntList();			this.KongCards[i].decode(by);}	}	}	export class s_NotifyPlayCard extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyPlayCard;		}		//required>int		public seat:number=0;//哪个坐位打的牌		//required>int		public playCard:number=0;//打的哪张牌		//optional>bool		public isWin:boolean;//是否胡牌		//repeated>IntList		public pongKongChow:IntList[] ;//可组合牌		public init(_seat:number,_playCard:number,_isWin:boolean,_pongKongChow:IntList[]):s_NotifyPlayCard{			this.seat=_seat;			this.playCard=_playCard;			this.isWin=_isWin;			this.pongKongChow=_pongKongChow;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.seat);by.writeInt(this.playCard);//基础类型不建议用optionalby.writeByte(1);by.writeBoolean(this.isWin);if (this.pongKongChow != null){by.writeShort(this.pongKongChow.length);for (var i:number = 0; i < this.pongKongChow.length; i++) {			this.pongKongChow[i].encode(by);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.seat=by.readInt();this.playCard=by.readInt();if (by.readByte() > 0) {this.isWin=by.readBoolean();}var __count3:number = by.readShort();		this.pongKongChow = [];for (var i:number = 0; i < __count3; i++) {			this.pongKongChow[i] = new IntList();			this.pongKongChow[i].decode(by);}	}	}	export class s_NotifyPlayResponse extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyPlayResponse;		}		//required>int		public seat:number=0;//谁打的		//required>int		public option:number=0;//是胡杠碰吃		//optional>int		public playCard:number=0;//打的哪张牌		//repeated>int		public pongKongChow:number[] ;//可组合牌		public init(_seat:number,_option:number,_playCard:number,_pongKongChow:number[]):s_NotifyPlayResponse{			this.seat=_seat;			this.option=_option;			this.playCard=_playCard;			this.pongKongChow=_pongKongChow;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.seat);by.writeInt(this.option);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.playCard);if (this.pongKongChow != null){by.writeShort(this.pongKongChow.length);for (var i:number = 0; i < this.pongKongChow.length; i++) {by.writeInt(this.pongKongChow[i]);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.seat=by.readInt();this.option=by.readInt();if (by.readByte() > 0) {this.playCard=by.readInt();}var __count3:number = by.readShort();		this.pongKongChow = [];for (var i:number = 0; i < __count3; i++) {this.pongKongChow[i]=by.readInt();}	}	}	export class s_NotifyChangeOpUser extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyChangeOpUser;		}		//required>int		public seat:number=0;//当前操作玩家		public init(_seat:number):s_NotifyChangeOpUser{			this.seat=_seat;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.seat);	}public decode(by:egret.ByteArray ):void{this.seat=by.readInt();	}	}	export class s_NotifyEndHandCards extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_NotifyEndHandCards;		}		//optional>int		public winnerSeat:number=0;//赢家坐位0:代表荒庄		//optional>int		public lastCard:number=0;//自摸时就是摸的那张牌		//repeated>SeatHandCards		public seatHandCards:SeatHandCards[] ;//玩家手牌		public init(_winnerSeat:number,_lastCard:number,_seatHandCards:SeatHandCards[]):s_NotifyEndHandCards{			this.winnerSeat=_winnerSeat;			this.lastCard=_lastCard;			this.seatHandCards=_seatHandCards;			return this;		}public encode(by:egret.ByteArray):void{//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.winnerSeat);//基础类型不建议用optionalby.writeByte(1);by.writeInt(this.lastCard);if (this.seatHandCards != null){by.writeShort(this.seatHandCards.length);for (var i:number = 0; i < this.seatHandCards.length; i++) {			this.seatHandCards[i].encode(by);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{if (by.readByte() > 0) {this.winnerSeat=by.readInt();}if (by.readByte() > 0) {this.lastCard=by.readInt();}var __count2:number = by.readShort();		this.seatHandCards = [];for (var i:number = 0; i < __count2; i++) {			this.seatHandCards[i] = new SeatHandCards();			this.seatHandCards[i].decode(by);}	}	}	export class c_DrawCardResponse extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_DrawCardResponse;		}		//required>int		public option:number=0;//操作选项		//repeated>int		public cardList:number[] ;//操作牌列表		public init(_option:number,_cardList:number[]):c_DrawCardResponse{			this.option=_option;			this.cardList=_cardList;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.option);if (this.cardList != null){by.writeShort(this.cardList.length);for (var i:number = 0; i < this.cardList.length; i++) {by.writeInt(this.cardList[i]);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.option=by.readInt();var __count1:number = by.readShort();		this.cardList = [];for (var i:number = 0; i < __count1; i++) {this.cardList[i]=by.readInt();}	}	}	export class s_DrawCardResponse extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_DrawCardResponse;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		public init(_isSuccess:boolean,_errMsg:string):s_DrawCardResponse{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}	}	}	export class c_PlayCard extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_PlayCard;		}		//required>int		public card:number=0;//打的哪张牌		public init(_card:number):c_PlayCard{			this.card=_card;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.card);	}public decode(by:egret.ByteArray ):void{this.card=by.readInt();	}	}	export class s_PlayCard extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_PlayCard;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		public init(_isSuccess:boolean,_errMsg:string):s_PlayCard{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}	}	}	export class c_PlayCardResponse extends proto.Pro{		public constructor(){			super();			this.S=MessageType.c_PlayCardResponse;		}		//required>int		public option:number=0;//操作选项		//repeated>int		public cardList:number[] ;//操作牌列表		public init(_option:number,_cardList:number[]):c_PlayCardResponse{			this.option=_option;			this.cardList=_cardList;			return this;		}public encode(by:egret.ByteArray):void{by.writeInt(this.option);if (this.cardList != null){by.writeShort(this.cardList.length);for (var i:number = 0; i < this.cardList.length; i++) {by.writeInt(this.cardList[i]);}}else{by.writeShort(0);}	}public decode(by:egret.ByteArray ):void{this.option=by.readInt();var __count1:number = by.readShort();		this.cardList = [];for (var i:number = 0; i < __count1; i++) {this.cardList[i]=by.readInt();}	}	}	export class s_PlayCardResponse extends proto.Pro{		public constructor(){			super();			this.S=MessageType.s_PlayCardResponse;		}		//required>bool		public isSuccess:boolean;//是否成功		//optional>string		public errMsg:string;//错误信息		public init(_isSuccess:boolean,_errMsg:string):s_PlayCardResponse{			this.isSuccess=_isSuccess;			this.errMsg=_errMsg;			return this;		}public encode(by:egret.ByteArray):void{by.writeBoolean(this.isSuccess);if (this.errMsg!= null){by.writeByte(1);by.writeUTF(this.errMsg);}else{	by.writeByte(0);}	}public decode(by:egret.ByteArray ):void{this.isSuccess=by.readBoolean();if (by.readByte() > 0) {this.errMsg=by.readUTF();}	}	}}